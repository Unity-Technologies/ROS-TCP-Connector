//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using RosMessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Sensor
{
    public class MagneticField : Message
    {
        public const string RosMessageName = "sensor_msgs/MagneticField";

        //  Measurement of the Magnetic Field vector at a specific location.
        //  If the covariance of the measurement is known, it should be filled in
        //  (if all you know is the variance of each measurement, e.g. from the datasheet,
        // just put those along the diagonal)
        //  A covariance matrix of all zeros will be interpreted as "covariance unknown",
        //  and to use the data a covariance will have to be assumed or gotten from some
        //  other source
        public Header header;
        //  timestamp is the time the
        //  field was measured
        //  frame_id is the location and orientation
        //  of the field measurement
        public Geometry.Vector3 magnetic_field;
        //  x, y, and z components of the
        //  field vector in Tesla
        //  If your sensor does not output 3 axes,
        //  put NaNs in the components not reported.
        public double[] magnetic_field_covariance;
        //  Row major about x, y, z axes
        //  0 is interpreted as variance unknown

        public MagneticField()
        {
            this.header = new Header();
            this.magnetic_field = new Geometry.Vector3();
            this.magnetic_field_covariance = new double[9];
        }

        public MagneticField(Header header, Geometry.Vector3 magnetic_field, double[] magnetic_field_covariance)
        {
            this.header = header;
            this.magnetic_field = magnetic_field;
            this.magnetic_field_covariance = magnetic_field_covariance;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.AddRange(magnetic_field.SerializationStatements());
            
            Array.Resize(ref magnetic_field_covariance, 9);
            foreach(var entry in magnetic_field_covariance)
                listOfSerializations.Add(BitConverter.GetBytes(entry));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            offset = this.magnetic_field.Deserialize(data, offset);
            
            this.magnetic_field_covariance= new double[9];
            for(var i = 0; i < 9; i++)
            {
                this.magnetic_field_covariance[i] = BitConverter.ToDouble(data, offset);
                offset += 8;
            }

            return offset;
        }

        public override string ToString()
        {
            return "MagneticField: " +
            "\nheader: " + header.ToString() +
            "\nmagnetic_field: " + magnetic_field.ToString() +
            "\nmagnetic_field_covariance: " + System.String.Join(", ", magnetic_field_covariance.ToList());
        }
    }
}
