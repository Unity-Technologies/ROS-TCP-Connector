//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using RosMessageGeneration;

namespace RosMessageTypes.Shape
{
    public class Mesh : Message
    {
        public const string RosMessageName = "shape_msgs/Mesh";

        //  Definition of a mesh
        //  list of triangles; the index values refer to positions in vertices[]
        public MeshTriangle[] triangles;
        //  the actual vertices that make up the mesh
        public Geometry.Point[] vertices;

        public Mesh()
        {
            this.triangles = new MeshTriangle[0];
            this.vertices = new Geometry.Point[0];
        }

        public Mesh(MeshTriangle[] triangles, Geometry.Point[] vertices)
        {
            this.triangles = triangles;
            this.vertices = vertices;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            
            listOfSerializations.Add(BitConverter.GetBytes(triangles.Length));
            foreach(var entry in triangles)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(vertices.Length));
            foreach(var entry in vertices)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            
            var trianglesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.triangles= new MeshTriangle[trianglesArrayLength];
            for(var i = 0; i < trianglesArrayLength; i++)
            {
                this.triangles[i] = new MeshTriangle();
                offset = this.triangles[i].Deserialize(data, offset);
            }
            
            var verticesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.vertices= new Geometry.Point[verticesArrayLength];
            for(var i = 0; i < verticesArrayLength; i++)
            {
                this.vertices[i] = new Geometry.Point();
                offset = this.vertices[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "Mesh: " +
            "\ntriangles: " + System.String.Join(", ", triangles.ToList()) +
            "\nvertices: " + System.String.Join(", ", vertices.ToList());
        }
    }
}
