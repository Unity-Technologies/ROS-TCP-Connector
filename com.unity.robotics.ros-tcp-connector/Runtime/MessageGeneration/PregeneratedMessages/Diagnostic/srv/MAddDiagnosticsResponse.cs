//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Diagnostic
{
    public class MAddDiagnosticsResponse : Message
    {
        public const string RosMessageName = "diagnostic_msgs/AddDiagnostics";

        //  True if diagnostic aggregator was updated with new diagnostics, False
        //  otherwise. A false return value means that either there is a bond in the
        //  aggregator which already used the requested namespace, or the initialization
        //  of analyzers failed.
        public bool success;
        //  Message with additional information about the success or failure
        public string message;

        public MAddDiagnosticsResponse()
        {
            this.success = false;
            this.message = "";
        }

        public MAddDiagnosticsResponse(bool success, string message)
        {
            this.success = success;
            this.message = message;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(BitConverter.GetBytes(this.success));
            listOfSerializations.Add(SerializeString(this.message));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            this.success = BitConverter.ToBoolean(data, offset);
            offset += 1;
            var messageStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.message = DeserializeString(data, offset, messageStringBytesLength);
            offset += messageStringBytesLength;

            return offset;
        }

        public override string ToString()
        {
            return "MAddDiagnosticsResponse: " +
            "\nsuccess: " + success.ToString() +
            "\nmessage: " + message.ToString();
        }
    }
}
