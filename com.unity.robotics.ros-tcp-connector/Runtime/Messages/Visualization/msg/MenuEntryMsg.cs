//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Visualization
{
    [Serializable]
    public class MenuEntryMsg : Message
    {
        public const string k_RosMessageName = "visualization_msgs/MenuEntry";
        public override string RosMessageName => k_RosMessageName;

        //  MenuEntry message.
        // 
        //  Each InteractiveMarker message has an array of MenuEntry messages.
        //  A collection of MenuEntries together describe a
        //  menu/submenu/subsubmenu/etc tree, though they are stored in a flat
        //  array.  The tree structure is represented by giving each menu entry
        //  an ID number and a "parent_id" field.  Top-level entries are the
        //  ones with parent_id = 0.  Menu entries are ordered within their
        //  level the same way they are ordered in the containing array.  Parent
        //  entries must appear before their children.
        // 
        //  Example:
        //  - id = 3
        //    parent_id = 0
        //    title = "fun"
        //  - id = 2
        //    parent_id = 0
        //    title = "robot"
        //  - id = 4
        //    parent_id = 2
        //    title = "pr2"
        //  - id = 5
        //    parent_id = 2
        //    title = "turtle"
        // 
        //  Gives a menu tree like this:
        //   - fun
        //   - robot
        //     - pr2
        //     - turtle
        //  ID is a number for each menu entry.  Must be unique within the
        //  control, and should never be 0.
        public uint id;
        //  ID of the parent of this menu entry, if it is a submenu.  If this
        //  menu entry is a top-level entry, set parent_id to 0.
        public uint parent_id;
        //  menu / entry title
        public string title;
        //  Arguments to command indicated by command_type (below)
        public string command;
        //  Command_type stores the type of response desired when this menu
        //  entry is clicked.
        //  FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry's id.
        //  ROSRUN: execute "rosrun" with arguments given in the command field (above).
        //  ROSLAUNCH: execute "roslaunch" with arguments given in the command field (above).
        public const byte FEEDBACK = 0;
        public const byte ROSRUN = 1;
        public const byte ROSLAUNCH = 2;
        public byte command_type;

        public MenuEntryMsg()
        {
            this.id = 0;
            this.parent_id = 0;
            this.title = "";
            this.command = "";
            this.command_type = 0;
        }

        public MenuEntryMsg(uint id, uint parent_id, string title, string command, byte command_type)
        {
            this.id = id;
            this.parent_id = parent_id;
            this.title = title;
            this.command = command;
            this.command_type = command_type;
        }

        public static MenuEntryMsg Deserialize(MessageDeserializer deserializer) => new MenuEntryMsg(deserializer);

        private MenuEntryMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.id);
            deserializer.Read(out this.parent_id);
            deserializer.Read(out this.title);
            deserializer.Read(out this.command);
            deserializer.Read(out this.command_type);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.id);
            serializer.Write(this.parent_id);
            serializer.Write(this.title);
            serializer.Write(this.command);
            serializer.Write(this.command_type);
        }

        public override string ToString()
        {
            return "MenuEntryMsg: " +
            "\nid: " + id.ToString() +
            "\nparent_id: " + parent_id.ToString() +
            "\ntitle: " + title.ToString() +
            "\ncommand: " + command.ToString() +
            "\ncommand_type: " + command_type.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
