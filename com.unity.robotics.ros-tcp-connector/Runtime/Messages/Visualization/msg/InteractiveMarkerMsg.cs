//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Visualization
{
    [Serializable]
    public class InteractiveMarkerMsg : Message
    {
        public const string k_RosMessageName = "visualization_msgs/InteractiveMarker";
        public override string RosMessageName => k_RosMessageName;

        //  Time/frame info.
        //  If header.time is set to 0, the marker will be retransformed into
        //  its frame on each timestep. You will receive the pose feedback
        //  in the same frame.
        //  Otherwise, you might receive feedback in a different frame.
        //  For rviz, this will be the current 'fixed frame' set by the user.
        public Std.HeaderMsg header;
        //  Initial pose. Also, defines the pivot point for rotations.
        public Geometry.PoseMsg pose;
        //  Identifying string. Must be globally unique in
        //  the topic that this message is sent through.
        public string name;
        //  Short description (< 40 characters).
        public string description;
        //  Scale to be used for default controls (default=1).
        public float scale;
        //  All menu and submenu entries associated with this marker.
        public MenuEntryMsg[] menu_entries;
        //  List of controls displayed for this marker.
        public InteractiveMarkerControlMsg[] controls;

        public InteractiveMarkerMsg()
        {
            this.header = new Std.HeaderMsg();
            this.pose = new Geometry.PoseMsg();
            this.name = "";
            this.description = "";
            this.scale = 0.0f;
            this.menu_entries = new MenuEntryMsg[0];
            this.controls = new InteractiveMarkerControlMsg[0];
        }

        public InteractiveMarkerMsg(Std.HeaderMsg header, Geometry.PoseMsg pose, string name, string description, float scale, MenuEntryMsg[] menu_entries, InteractiveMarkerControlMsg[] controls)
        {
            this.header = header;
            this.pose = pose;
            this.name = name;
            this.description = description;
            this.scale = scale;
            this.menu_entries = menu_entries;
            this.controls = controls;
        }

        public static InteractiveMarkerMsg Deserialize(MessageDeserializer deserializer) => new InteractiveMarkerMsg(deserializer);

        private InteractiveMarkerMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.pose = Geometry.PoseMsg.Deserialize(deserializer);
            deserializer.Read(out this.name);
            deserializer.Read(out this.description);
            deserializer.Read(out this.scale);
            deserializer.Read(out this.menu_entries, MenuEntryMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.controls, InteractiveMarkerControlMsg.Deserialize, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.pose);
            serializer.Write(this.name);
            serializer.Write(this.description);
            serializer.Write(this.scale);
            serializer.WriteLength(this.menu_entries);
            serializer.Write(this.menu_entries);
            serializer.WriteLength(this.controls);
            serializer.Write(this.controls);
        }

        public override string ToString()
        {
            return "InteractiveMarkerMsg: " +
            "\nheader: " + header.ToString() +
            "\npose: " + pose.ToString() +
            "\nname: " + name.ToString() +
            "\ndescription: " + description.ToString() +
            "\nscale: " + scale.ToString() +
            "\nmenu_entries: " + System.String.Join(", ", menu_entries.ToList()) +
            "\ncontrols: " + System.String.Join(", ", controls.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
