//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Visualization
{
    [Serializable]
    public class InteractiveMarkerUpdateMsg : Message
    {
        public const string k_RosMessageName = "visualization_msgs/InteractiveMarkerUpdate";
        public override string RosMessageName => k_RosMessageName;

        //  Identifying string. Must be unique in the topic namespace
        //  that this server works on.
        public string server_id;
        //  Sequence number.
        //  The client will use this to detect if it has missed an update.
        public ulong seq_num;
        //  Type holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.
        //  UPDATE: Incremental update to previous state.
        //          The sequence number must be 1 higher than for
        //          the previous update.
        //  KEEP_ALIVE: Indicates the that the server is still living.
        //              The sequence number does not increase.
        //              No payload data should be filled out (markers, poses, or erases).
        public const byte KEEP_ALIVE = 0;
        public const byte UPDATE = 1;
        public byte type;
        //  Note: No guarantees on the order of processing.
        //        Contents must be kept consistent by sender.
        //  Markers to be added or updated
        public InteractiveMarkerMsg[] markers;
        //  Poses of markers that should be moved
        public InteractiveMarkerPoseMsg[] poses;
        //  Names of markers to be erased
        public string[] erases;

        public InteractiveMarkerUpdateMsg()
        {
            this.server_id = "";
            this.seq_num = 0;
            this.type = 0;
            this.markers = new InteractiveMarkerMsg[0];
            this.poses = new InteractiveMarkerPoseMsg[0];
            this.erases = new string[0];
        }

        public InteractiveMarkerUpdateMsg(string server_id, ulong seq_num, byte type, InteractiveMarkerMsg[] markers, InteractiveMarkerPoseMsg[] poses, string[] erases)
        {
            this.server_id = server_id;
            this.seq_num = seq_num;
            this.type = type;
            this.markers = markers;
            this.poses = poses;
            this.erases = erases;
        }

        public static InteractiveMarkerUpdateMsg Deserialize(MessageDeserializer deserializer) => new InteractiveMarkerUpdateMsg(deserializer);

        private InteractiveMarkerUpdateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.server_id);
            deserializer.Read(out this.seq_num);
            deserializer.Read(out this.type);
            deserializer.Read(out this.markers, InteractiveMarkerMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.poses, InteractiveMarkerPoseMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.erases, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.server_id);
            serializer.Write(this.seq_num);
            serializer.Write(this.type);
            serializer.WriteLength(this.markers);
            serializer.Write(this.markers);
            serializer.WriteLength(this.poses);
            serializer.Write(this.poses);
            serializer.WriteLength(this.erases);
            serializer.Write(this.erases);
        }

        public override string ToString()
        {
            return "InteractiveMarkerUpdateMsg: " +
            "\nserver_id: " + server_id.ToString() +
            "\nseq_num: " + seq_num.ToString() +
            "\ntype: " + type.ToString() +
            "\nmarkers: " + System.String.Join(", ", markers.ToList()) +
            "\nposes: " + System.String.Join(", ", poses.ToList()) +
            "\nerases: " + System.String.Join(", ", erases.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
