//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Visualization
{
    [Serializable]
    public class ImageMarkerMsg : Message
    {
        public const string k_RosMessageName = "visualization_msgs/ImageMarker";
        public override string RosMessageName => k_RosMessageName;

        public const int CIRCLE = 0;
        public const int LINE_STRIP = 1;
        public const int LINE_LIST = 2;
        public const int POLYGON = 3;
        public const int POINTS = 4;
        public const int ADD = 0;
        public const int REMOVE = 1;
        public Std.HeaderMsg header;
        //  Namespace which is used with the id to form a unique id.
        public string ns;
        //  Unique id within the namespace.
        public int id;
        //  One of the above types, e.g. CIRCLE, LINE_STRIP, etc.
        public int type;
        //  Either ADD or REMOVE.
        public int action;
        //  Two-dimensional coordinate position, in pixel-coordinates.
        public Geometry.PointMsg position;
        //  The scale of the object, e.g. the diameter for a CIRCLE.
        public float scale;
        //  The outline color of the marker.
        public Std.ColorRGBAMsg outline_color;
        //  Whether or not to fill in the shape with color.
        public byte filled;
        //  Fill color; in the range: [0.0-1.0]
        public Std.ColorRGBAMsg fill_color;
        //  How long the object should last before being automatically deleted.
        //  0 indicates forever.
        public BuiltinInterfaces.DurationMsg lifetime;
        //  Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS, etc.
        public Geometry.PointMsg[] points;
        //  The color for each line, point, etc. in the points field.
        public Std.ColorRGBAMsg[] outline_colors;

        public ImageMarkerMsg()
        {
            this.header = new Std.HeaderMsg();
            this.ns = "";
            this.id = 0;
            this.type = 0;
            this.action = 0;
            this.position = new Geometry.PointMsg();
            this.scale = 0.0f;
            this.outline_color = new Std.ColorRGBAMsg();
            this.filled = 0;
            this.fill_color = new Std.ColorRGBAMsg();
            this.lifetime = new BuiltinInterfaces.DurationMsg();
            this.points = new Geometry.PointMsg[0];
            this.outline_colors = new Std.ColorRGBAMsg[0];
        }

        public ImageMarkerMsg(Std.HeaderMsg header, string ns, int id, int type, int action, Geometry.PointMsg position, float scale, Std.ColorRGBAMsg outline_color, byte filled, Std.ColorRGBAMsg fill_color, BuiltinInterfaces.DurationMsg lifetime, Geometry.PointMsg[] points, Std.ColorRGBAMsg[] outline_colors)
        {
            this.header = header;
            this.ns = ns;
            this.id = id;
            this.type = type;
            this.action = action;
            this.position = position;
            this.scale = scale;
            this.outline_color = outline_color;
            this.filled = filled;
            this.fill_color = fill_color;
            this.lifetime = lifetime;
            this.points = points;
            this.outline_colors = outline_colors;
        }

        public static ImageMarkerMsg Deserialize(MessageDeserializer deserializer) => new ImageMarkerMsg(deserializer);

        private ImageMarkerMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.ns);
            deserializer.Read(out this.id);
            deserializer.Read(out this.type);
            deserializer.Read(out this.action);
            this.position = Geometry.PointMsg.Deserialize(deserializer);
            deserializer.Read(out this.scale);
            this.outline_color = Std.ColorRGBAMsg.Deserialize(deserializer);
            deserializer.Read(out this.filled);
            this.fill_color = Std.ColorRGBAMsg.Deserialize(deserializer);
            this.lifetime = BuiltinInterfaces.DurationMsg.Deserialize(deserializer);
            deserializer.Read(out this.points, Geometry.PointMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.outline_colors, Std.ColorRGBAMsg.Deserialize, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.ns);
            serializer.Write(this.id);
            serializer.Write(this.type);
            serializer.Write(this.action);
            serializer.Write(this.position);
            serializer.Write(this.scale);
            serializer.Write(this.outline_color);
            serializer.Write(this.filled);
            serializer.Write(this.fill_color);
            serializer.Write(this.lifetime);
            serializer.WriteLength(this.points);
            serializer.Write(this.points);
            serializer.WriteLength(this.outline_colors);
            serializer.Write(this.outline_colors);
        }

        public override string ToString()
        {
            return "ImageMarkerMsg: " +
            "\nheader: " + header.ToString() +
            "\nns: " + ns.ToString() +
            "\nid: " + id.ToString() +
            "\ntype: " + type.ToString() +
            "\naction: " + action.ToString() +
            "\nposition: " + position.ToString() +
            "\nscale: " + scale.ToString() +
            "\noutline_color: " + outline_color.ToString() +
            "\nfilled: " + filled.ToString() +
            "\nfill_color: " + fill_color.ToString() +
            "\nlifetime: " + lifetime.ToString() +
            "\npoints: " + System.String.Join(", ", points.ToList()) +
            "\noutline_colors: " + System.String.Join(", ", outline_colors.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
