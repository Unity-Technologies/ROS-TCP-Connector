//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.ObjectRecognition
{
    [Serializable]
    public class ObjectTypeMsg : Message
    {
        public const string k_RosMessageName = "object_recognition_msgs/ObjectType";
        public override string RosMessageName => k_RosMessageName;

        // ################################################# OBJECT ID #########################################################
        //  Contains information about the type of a found object. Those two sets of parameters together uniquely define an
        //  object
        //  The key of the found object: the unique identifier in the given db
        public string key;
        //  The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
        //  database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
        //  There is no conventional format for those parameters and it's nice to keep that flexibility.
        //  The object_recognition_core as a generic DB type that can read those fields
        //  Current examples:
        //  For CouchDB:
        //    type: 'CouchDB'
        //    root: 'http://localhost:5984'
        //    collection: 'object_recognition'
        //  For SQL household database:
        //    type: 'SqlHousehold'
        //    host: 'wgs36'
        //    port: 5432
        //    user: 'willow'
        //    password: 'willow'
        //    name: 'household_objects'
        //    module: 'tabletop'
        public string db;

        public ObjectTypeMsg()
        {
            this.key = "";
            this.db = "";
        }

        public ObjectTypeMsg(string key, string db)
        {
            this.key = key;
            this.db = db;
        }

        public static ObjectTypeMsg Deserialize(MessageDeserializer deserializer) => new ObjectTypeMsg(deserializer);

        private ObjectTypeMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.key);
            deserializer.Read(out this.db);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.key);
            serializer.Write(this.db);
        }

        public override string ToString()
        {
            return "ObjectTypeMsg: " +
            "\nkey: " + key.ToString() +
            "\ndb: " + db.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
