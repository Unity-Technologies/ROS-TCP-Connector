//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Sensor
{
    [Serializable]
    public class PointCloud2Msg : Message
    {
        public const string k_RosMessageName = "sensor_msgs/PointCloud2";
        public override string RosMessageName => k_RosMessageName;

        //  This message holds a collection of N-dimensional points, which may
        //  contain additional information such as normals, intensity, etc. The
        //  point data is stored as a binary blob, its layout described by the
        //  contents of the "fields" array.
        // 
        //  The point cloud data may be organized 2d (image-like) or 1d (unordered).
        //  Point clouds organized as 2d images may be produced by camera depth sensors
        //  such as stereo or time-of-flight.
        //  Time of sensor data acquisition, and the coordinate frame ID (for 3d points).
        public Std.HeaderMsg header;
        //  2D structure of the point cloud. If the cloud is unordered, height is
        //  1 and width is the length of the point cloud.
        public uint height;
        public uint width;
        //  Describes the channels and their layout in the binary data blob.
        public PointFieldMsg[] fields;
        public bool is_bigendian;
        //  Is this data bigendian?
        public uint point_step;
        //  Length of a point in bytes
        public uint row_step;
        //  Length of a row in bytes
        public byte[] data;
        //  Actual point data, size is (row_step*height)
        public bool is_dense;
        //  True if there are no invalid points

        public PointCloud2Msg()
        {
            this.header = new Std.HeaderMsg();
            this.height = 0;
            this.width = 0;
            this.fields = new PointFieldMsg[0];
            this.is_bigendian = false;
            this.point_step = 0;
            this.row_step = 0;
            this.data = new byte[0];
            this.is_dense = false;
        }

        public PointCloud2Msg(Std.HeaderMsg header, uint height, uint width, PointFieldMsg[] fields, bool is_bigendian, uint point_step, uint row_step, byte[] data, bool is_dense)
        {
            this.header = header;
            this.height = height;
            this.width = width;
            this.fields = fields;
            this.is_bigendian = is_bigendian;
            this.point_step = point_step;
            this.row_step = row_step;
            this.data = data;
            this.is_dense = is_dense;
        }

        public static PointCloud2Msg Deserialize(MessageDeserializer deserializer) => new PointCloud2Msg(deserializer);

        private PointCloud2Msg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.height);
            deserializer.Read(out this.width);
            deserializer.Read(out this.fields, PointFieldMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.is_bigendian);
            deserializer.Read(out this.point_step);
            deserializer.Read(out this.row_step);
            deserializer.Read(out this.data, sizeof(byte), deserializer.ReadLength());
            deserializer.Read(out this.is_dense);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.height);
            serializer.Write(this.width);
            serializer.WriteLength(this.fields);
            serializer.Write(this.fields);
            serializer.Write(this.is_bigendian);
            serializer.Write(this.point_step);
            serializer.Write(this.row_step);
            serializer.WriteLength(this.data);
            serializer.Write(this.data);
            serializer.Write(this.is_dense);
        }

        public override string ToString()
        {
            return "PointCloud2Msg: " +
            "\nheader: " + header.ToString() +
            "\nheight: " + height.ToString() +
            "\nwidth: " + width.ToString() +
            "\nfields: " + System.String.Join(", ", fields.ToList()) +
            "\nis_bigendian: " + is_bigendian.ToString() +
            "\npoint_step: " + point_step.ToString() +
            "\nrow_step: " + row_step.ToString() +
            "\ndata: " + System.String.Join(", ", data.ToList()) +
            "\nis_dense: " + is_dense.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
