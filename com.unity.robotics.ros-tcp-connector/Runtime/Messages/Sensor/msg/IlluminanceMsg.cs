//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Sensor
{
    [Serializable]
    public class IlluminanceMsg : Message
    {
        public const string k_RosMessageName = "sensor_msgs/Illuminance";
        public override string RosMessageName => k_RosMessageName;

        //  Single photometric illuminance measurement.  Light should be assumed to be
        //  measured along the sensor's x-axis (the area of detection is the y-z plane).
        //  The illuminance should have a 0 or positive value and be received with
        //  the sensor's +X axis pointing toward the light source.
        // 
        //  Photometric illuminance is the measure of the human eye's sensitivity of the
        //  intensity of light encountering or passing through a surface.
        // 
        //  All other Photometric and Radiometric measurements should not use this message.
        //  This message cannot represent:
        //   - Luminous intensity (candela/light source output)
        //   - Luminance (nits/light output per area)
        //   - Irradiance (watt/area), etc.
        public Std.HeaderMsg header;
        //  timestamp is the time the illuminance was measured
        //  frame_id is the location and direction of the reading
        public double illuminance;
        //  Measurement of the Photometric Illuminance in Lux.
        public double variance;
        //  0 is interpreted as variance unknown

        public IlluminanceMsg()
        {
            this.header = new Std.HeaderMsg();
            this.illuminance = 0.0;
            this.variance = 0.0;
        }

        public IlluminanceMsg(Std.HeaderMsg header, double illuminance, double variance)
        {
            this.header = header;
            this.illuminance = illuminance;
            this.variance = variance;
        }

        public static IlluminanceMsg Deserialize(MessageDeserializer deserializer) => new IlluminanceMsg(deserializer);

        private IlluminanceMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.illuminance);
            deserializer.Read(out this.variance);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.illuminance);
            serializer.Write(this.variance);
        }

        public override string ToString()
        {
            return "IlluminanceMsg: " +
            "\nheader: " + header.ToString() +
            "\nilluminance: " + illuminance.ToString() +
            "\nvariance: " + variance.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
