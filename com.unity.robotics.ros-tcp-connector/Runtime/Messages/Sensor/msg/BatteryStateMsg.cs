//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Sensor
{
    [Serializable]
    public class BatteryStateMsg : Message
    {
        public const string k_RosMessageName = "sensor_msgs/BatteryState";
        public override string RosMessageName => k_RosMessageName;

        //  Constants are chosen to match the enums in the linux kernel
        //  defined in include/linux/power_supply.h as of version 3.7
        //  The one difference is for style reasons the constants are
        //  all uppercase not mixed case.
        //  Power supply status constants
        public const byte POWER_SUPPLY_STATUS_UNKNOWN = 0;
        public const byte POWER_SUPPLY_STATUS_CHARGING = 1;
        public const byte POWER_SUPPLY_STATUS_DISCHARGING = 2;
        public const byte POWER_SUPPLY_STATUS_NOT_CHARGING = 3;
        public const byte POWER_SUPPLY_STATUS_FULL = 4;
        //  Power supply health constants
        public const byte POWER_SUPPLY_HEALTH_UNKNOWN = 0;
        public const byte POWER_SUPPLY_HEALTH_GOOD = 1;
        public const byte POWER_SUPPLY_HEALTH_OVERHEAT = 2;
        public const byte POWER_SUPPLY_HEALTH_DEAD = 3;
        public const byte POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4;
        public const byte POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5;
        public const byte POWER_SUPPLY_HEALTH_COLD = 6;
        public const byte POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7;
        public const byte POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8;
        //  Power supply technology (chemistry) constants
        public const byte POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0;
        public const byte POWER_SUPPLY_TECHNOLOGY_NIMH = 1;
        public const byte POWER_SUPPLY_TECHNOLOGY_LION = 2;
        public const byte POWER_SUPPLY_TECHNOLOGY_LIPO = 3;
        public const byte POWER_SUPPLY_TECHNOLOGY_LIFE = 4;
        public const byte POWER_SUPPLY_TECHNOLOGY_NICD = 5;
        public const byte POWER_SUPPLY_TECHNOLOGY_LIMN = 6;
        public Std.HeaderMsg header;
        public float voltage;
        //  Voltage in Volts (Mandatory)
        public float temperature;
        //  Temperature in Degrees Celsius (If unmeasured NaN)
        public float current;
        //  Negative when discharging (A)  (If unmeasured NaN)
        public float charge;
        //  Current charge in Ah  (If unmeasured NaN)
        public float capacity;
        //  Capacity in Ah (last full capacity)  (If unmeasured NaN)
        public float design_capacity;
        //  Capacity in Ah (design capacity)  (If unmeasured NaN)
        public float percentage;
        //  Charge percentage on 0 to 1 range  (If unmeasured NaN)
        public byte power_supply_status;
        //  The charging status as reported. Values defined above
        public byte power_supply_health;
        //  The battery health metric. Values defined above
        public byte power_supply_technology;
        //  The battery chemistry. Values defined above
        public bool present;
        //  True if the battery is present
        public float[] cell_voltage;
        //  An array of individual cell voltages for each cell in the pack
        //  If individual voltages unknown but number of cells known set each to NaN
        public float[] cell_temperature;
        //  An array of individual cell temperatures for each cell in the pack
        //  If individual temperatures unknown but number of cells known set each to NaN
        public string location;
        //  The location into which the battery is inserted. (slot number or plug)
        public string serial_number;
        //  The best approximation of the battery serial number

        public BatteryStateMsg()
        {
            this.header = new Std.HeaderMsg();
            this.voltage = 0.0f;
            this.temperature = 0.0f;
            this.current = 0.0f;
            this.charge = 0.0f;
            this.capacity = 0.0f;
            this.design_capacity = 0.0f;
            this.percentage = 0.0f;
            this.power_supply_status = 0;
            this.power_supply_health = 0;
            this.power_supply_technology = 0;
            this.present = false;
            this.cell_voltage = new float[0];
            this.cell_temperature = new float[0];
            this.location = "";
            this.serial_number = "";
        }

        public BatteryStateMsg(Std.HeaderMsg header, float voltage, float temperature, float current, float charge, float capacity, float design_capacity, float percentage, byte power_supply_status, byte power_supply_health, byte power_supply_technology, bool present, float[] cell_voltage, float[] cell_temperature, string location, string serial_number)
        {
            this.header = header;
            this.voltage = voltage;
            this.temperature = temperature;
            this.current = current;
            this.charge = charge;
            this.capacity = capacity;
            this.design_capacity = design_capacity;
            this.percentage = percentage;
            this.power_supply_status = power_supply_status;
            this.power_supply_health = power_supply_health;
            this.power_supply_technology = power_supply_technology;
            this.present = present;
            this.cell_voltage = cell_voltage;
            this.cell_temperature = cell_temperature;
            this.location = location;
            this.serial_number = serial_number;
        }

        public static BatteryStateMsg Deserialize(MessageDeserializer deserializer) => new BatteryStateMsg(deserializer);

        private BatteryStateMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.voltage);
            deserializer.Read(out this.temperature);
            deserializer.Read(out this.current);
            deserializer.Read(out this.charge);
            deserializer.Read(out this.capacity);
            deserializer.Read(out this.design_capacity);
            deserializer.Read(out this.percentage);
            deserializer.Read(out this.power_supply_status);
            deserializer.Read(out this.power_supply_health);
            deserializer.Read(out this.power_supply_technology);
            deserializer.Read(out this.present);
            deserializer.Read(out this.cell_voltage, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.cell_temperature, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.location);
            deserializer.Read(out this.serial_number);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.voltage);
            serializer.Write(this.temperature);
            serializer.Write(this.current);
            serializer.Write(this.charge);
            serializer.Write(this.capacity);
            serializer.Write(this.design_capacity);
            serializer.Write(this.percentage);
            serializer.Write(this.power_supply_status);
            serializer.Write(this.power_supply_health);
            serializer.Write(this.power_supply_technology);
            serializer.Write(this.present);
            serializer.WriteLength(this.cell_voltage);
            serializer.Write(this.cell_voltage);
            serializer.WriteLength(this.cell_temperature);
            serializer.Write(this.cell_temperature);
            serializer.Write(this.location);
            serializer.Write(this.serial_number);
        }

        public override string ToString()
        {
            return "BatteryStateMsg: " +
            "\nheader: " + header.ToString() +
            "\nvoltage: " + voltage.ToString() +
            "\ntemperature: " + temperature.ToString() +
            "\ncurrent: " + current.ToString() +
            "\ncharge: " + charge.ToString() +
            "\ncapacity: " + capacity.ToString() +
            "\ndesign_capacity: " + design_capacity.ToString() +
            "\npercentage: " + percentage.ToString() +
            "\npower_supply_status: " + power_supply_status.ToString() +
            "\npower_supply_health: " + power_supply_health.ToString() +
            "\npower_supply_technology: " + power_supply_technology.ToString() +
            "\npresent: " + present.ToString() +
            "\ncell_voltage: " + System.String.Join(", ", cell_voltage.ToList()) +
            "\ncell_temperature: " + System.String.Join(", ", cell_temperature.ToList()) +
            "\nlocation: " + location.ToString() +
            "\nserial_number: " + serial_number.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
