//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Std
{
    [Serializable]
    public class MultiArrayLayoutMsg : Message
    {
        public const string k_RosMessageName = "std_msgs/MultiArrayLayout";
        public override string RosMessageName => k_RosMessageName;

        //  This was originally provided as an example message.
        //  It is deprecated as of Foxy
        //  It is recommended to create your own semantically meaningful message.
        //  However if you would like to continue using this please use the equivalent in example_msgs.
        //  The multiarray declares a generic multi-dimensional array of a
        //  particular data type.  Dimensions are ordered from outer most
        //  to inner most.
        // 
        //  Accessors should ALWAYS be written in terms of dimension stride
        //  and specified outer-most dimension first.
        // 
        //  multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
        // 
        //  A standard, 3-channel 640x480 image with interleaved color channels
        //  would be specified as:
        // 
        //  dim[0].label  = "height"
        //  dim[0].size   = 480
        //  dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
        //  dim[1].label  = "width"
        //  dim[1].size   = 640
        //  dim[1].stride = 3*640 = 1920
        //  dim[2].label  = "channel"
        //  dim[2].size   = 3
        //  dim[2].stride = 3
        // 
        //  multiarray(i,j,k) refers to the ith row, jth column, and kth channel.
        public MultiArrayDimensionMsg[] dim;
        //  Array of dimension properties
        public uint data_offset;
        //  padding bytes at front of data

        public MultiArrayLayoutMsg()
        {
            this.dim = new MultiArrayDimensionMsg[0];
            this.data_offset = 0;
        }

        public MultiArrayLayoutMsg(MultiArrayDimensionMsg[] dim, uint data_offset)
        {
            this.dim = dim;
            this.data_offset = data_offset;
        }

        public static MultiArrayLayoutMsg Deserialize(MessageDeserializer deserializer) => new MultiArrayLayoutMsg(deserializer);

        private MultiArrayLayoutMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.dim, MultiArrayDimensionMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.data_offset);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.dim);
            serializer.Write(this.dim);
            serializer.Write(this.data_offset);
        }

        public override string ToString()
        {
            return "MultiArrayLayoutMsg: " +
            "\ndim: " + System.String.Join(", ", dim.ToList()) +
            "\ndata_offset: " + data_offset.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
