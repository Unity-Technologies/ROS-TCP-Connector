//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Trajectory
{
    [Serializable]
    public class JointTrajectoryPointMsg : Message
    {
        public const string k_RosMessageName = "trajectory_msgs/JointTrajectoryPoint";
        public override string RosMessageName => k_RosMessageName;

        //  Each trajectory point specifies either positions[, velocities[, accelerations]]
        //  or positions[, effort] for the trajectory to be executed.
        //  All specified values are in the same order as the joint names in JointTrajectory.msg.
        //  Single DOF joint positions for each joint relative to their "0" position.
        //  The units depend on the specific joint type: radians for revolute or
        //  continuous joints, and meters for prismatic joints.
        public double[] positions;
        //  The rate of change in position of each joint. Units are joint type dependent.
        //  Radians/second for revolute or continuous joints, and meters/second for
        //  prismatic joints.
        public double[] velocities;
        //  Rate of change in velocity of each joint. Units are joint type dependent.
        //  Radians/second^2 for revolute or continuous joints, and meters/second^2 for
        //  prismatic joints.
        public double[] accelerations;
        //  The torque or the force to be applied at each joint. For revolute/continuous
        //  joints effort denotes a torque in newton-meters. For prismatic joints, effort
        //  denotes a force in newtons.
        public double[] effort;
        //  Desired time from the trajectory start to arrive at this trajectory point.
        public BuiltinInterfaces.DurationMsg time_from_start;

        public JointTrajectoryPointMsg()
        {
            this.positions = new double[0];
            this.velocities = new double[0];
            this.accelerations = new double[0];
            this.effort = new double[0];
            this.time_from_start = new BuiltinInterfaces.DurationMsg();
        }

        public JointTrajectoryPointMsg(double[] positions, double[] velocities, double[] accelerations, double[] effort, BuiltinInterfaces.DurationMsg time_from_start)
        {
            this.positions = positions;
            this.velocities = velocities;
            this.accelerations = accelerations;
            this.effort = effort;
            this.time_from_start = time_from_start;
        }

        public static JointTrajectoryPointMsg Deserialize(MessageDeserializer deserializer) => new JointTrajectoryPointMsg(deserializer);

        private JointTrajectoryPointMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.positions, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.velocities, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.accelerations, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.effort, sizeof(double), deserializer.ReadLength());
            this.time_from_start = BuiltinInterfaces.DurationMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.positions);
            serializer.Write(this.positions);
            serializer.WriteLength(this.velocities);
            serializer.Write(this.velocities);
            serializer.WriteLength(this.accelerations);
            serializer.Write(this.accelerations);
            serializer.WriteLength(this.effort);
            serializer.Write(this.effort);
            serializer.Write(this.time_from_start);
        }

        public override string ToString()
        {
            return "JointTrajectoryPointMsg: " +
            "\npositions: " + System.String.Join(", ", positions.ToList()) +
            "\nvelocities: " + System.String.Join(", ", velocities.ToList()) +
            "\naccelerations: " + System.String.Join(", ", accelerations.ToList()) +
            "\neffort: " + System.String.Join(", ", effort.ToList()) +
            "\ntime_from_start: " + time_from_start.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
