//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Octomap
{
    [Serializable]
    public class OctomapMsg : Message
    {
        public const string k_RosMessageName = "octomap_msgs/Octomap";
        public override string RosMessageName => k_RosMessageName;

        //  A 3D map in binary format, as Octree
        public HeaderMsg header;
        //  Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
        public bool binary;
        //  Class id of the contained octree 
        public string id;
        //  Resolution (in m) of the smallest octree nodes
        public double resolution;
        //  binary serialization of octree, use conversions.h to read and write octrees
        public sbyte[] data;

        public OctomapMsg()
        {
            this.header = new HeaderMsg();
            this.binary = false;
            this.id = "";
            this.resolution = 0.0;
            this.data = new sbyte[0];
        }

        public OctomapMsg(HeaderMsg header, bool binary, string id, double resolution, sbyte[] data)
        {
            this.header = header;
            this.binary = binary;
            this.id = id;
            this.resolution = resolution;
            this.data = data;
        }

        public static OctomapMsg Deserialize(MessageDeserializer deserializer) => new OctomapMsg(deserializer);

        private OctomapMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.binary);
            deserializer.Read(out this.id);
            deserializer.Read(out this.resolution);
            deserializer.Read(out this.data, sizeof(sbyte), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.binary);
            serializer.Write(this.id);
            serializer.Write(this.resolution);
            serializer.WriteLength(this.data);
            serializer.Write(this.data);
        }

        public override string ToString()
        {
            return "OctomapMsg: " +
            "\nheader: " + header.ToString() +
            "\nbinary: " + binary.ToString() +
            "\nid: " + id.ToString() +
            "\nresolution: " + resolution.ToString() +
            "\ndata: " + System.String.Join(", ", data.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
